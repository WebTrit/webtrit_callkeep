// Autogenerated from Pigeon (v22.6.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PLogTypeEnum {
  debug,
  error,
  info,
  verbose,
  warn,
}

enum PSpecialPermissionStatusTypeEnum {
  denied,
  granted,
}

enum PCallkeepAndroidBatteryMode {
  unrestricted,
  optimized,
  restricted,
  unknown,
}

enum PHandleTypeEnum {
  generic,
  number,
  email,
}

enum PCallInfoConsts {
  uuid,
  dtmf,
  isVideo,
  number,
  name,
}

enum PEndCallReasonEnum {
  failed,
  remoteEnded,
  unanswered,
  answeredElsewhere,
  declinedElsewhere,
  missed,
}

enum PIncomingCallErrorEnum {
  unknown,
  unentitled,
  callIdAlreadyExists,
  callIdAlreadyExistsAndAnswered,
  callIdAlreadyTerminated,
  filteredByDoNotDisturb,
  filteredByBlockList,
  internal,
}

enum PCallRequestErrorEnum {
  unknown,
  unentitled,
  unknownCallUuid,
  callUuidAlreadyExists,
  maximumCallGroupsReached,
  internal,
  emergencyNumber,
}

enum PCallkeepLifecycleType {
  onCreate,
  onStart,
  onResume,
  onPause,
  onStop,
  onDestroy,
  onAny,
}

enum PCallkeepPushNotificationSyncStatus {
  synchronizeCallStatus,
  releaseResources,
}

enum PCallkeepConnectionState {
  stateInitializing,
  stateNew,
  stateRinging,
  stateDialing,
  stateActive,
  stateHolding,
  stateDisconnected,
  statePullingCall,
}

enum PCallkeepDisconnectCauseType {
  unknown,
  error,
  local,
  remote,
  canceled,
  missed,
  rejected,
  busy,
  restricted,
  other,
  connectionManagerNotSupported,
  answeredElsewhere,
  callPulled,
}

enum PCallkeepSignalingStatus {
  disconnecting,
  disconnect,
  connecting,
  connect,
  failure,
}

class PIOSOptions {
  PIOSOptions({
    required this.localizedName,
    this.ringtoneSound,
    this.ringbackSound,
    this.iconTemplateImageAssetName,
    required this.maximumCallGroups,
    required this.maximumCallsPerCallGroup,
    this.supportsHandleTypeGeneric,
    this.supportsHandleTypePhoneNumber,
    this.supportsHandleTypeEmailAddress,
    required this.supportsVideo,
    required this.includesCallsInRecents,
    required this.driveIdleTimerDisabled,
  });

  String localizedName;

  String? ringtoneSound;

  String? ringbackSound;

  String? iconTemplateImageAssetName;

  int maximumCallGroups;

  int maximumCallsPerCallGroup;

  bool? supportsHandleTypeGeneric;

  bool? supportsHandleTypePhoneNumber;

  bool? supportsHandleTypeEmailAddress;

  bool supportsVideo;

  bool includesCallsInRecents;

  bool driveIdleTimerDisabled;

  Object encode() {
    return <Object?>[
      localizedName,
      ringtoneSound,
      ringbackSound,
      iconTemplateImageAssetName,
      maximumCallGroups,
      maximumCallsPerCallGroup,
      supportsHandleTypeGeneric,
      supportsHandleTypePhoneNumber,
      supportsHandleTypeEmailAddress,
      supportsVideo,
      includesCallsInRecents,
      driveIdleTimerDisabled,
    ];
  }

  static PIOSOptions decode(Object result) {
    result as List<Object?>;
    return PIOSOptions(
      localizedName: result[0]! as String,
      ringtoneSound: result[1] as String?,
      ringbackSound: result[2] as String?,
      iconTemplateImageAssetName: result[3] as String?,
      maximumCallGroups: result[4]! as int,
      maximumCallsPerCallGroup: result[5]! as int,
      supportsHandleTypeGeneric: result[6] as bool?,
      supportsHandleTypePhoneNumber: result[7] as bool?,
      supportsHandleTypeEmailAddress: result[8] as bool?,
      supportsVideo: result[9]! as bool,
      includesCallsInRecents: result[10]! as bool,
      driveIdleTimerDisabled: result[11]! as bool,
    );
  }
}

class PAndroidOptions {
  PAndroidOptions({
    this.ringtoneSound,
    this.ringbackSound,
  });

  String? ringtoneSound;

  String? ringbackSound;

  Object encode() {
    return <Object?>[
      ringtoneSound,
      ringbackSound,
    ];
  }

  static PAndroidOptions decode(Object result) {
    result as List<Object?>;
    return PAndroidOptions(
      ringtoneSound: result[0] as String?,
      ringbackSound: result[1] as String?,
    );
  }
}

class POptions {
  POptions({
    required this.ios,
    required this.android,
  });

  PIOSOptions ios;

  PAndroidOptions android;

  Object encode() {
    return <Object?>[
      ios,
      android,
    ];
  }

  static POptions decode(Object result) {
    result as List<Object?>;
    return POptions(
      ios: result[0]! as PIOSOptions,
      android: result[1]! as PAndroidOptions,
    );
  }
}

class PHandle {
  PHandle({
    required this.type,
    required this.value,
  });

  PHandleTypeEnum type;

  String value;

  Object encode() {
    return <Object?>[
      type,
      value,
    ];
  }

  static PHandle decode(Object result) {
    result as List<Object?>;
    return PHandle(
      type: result[0]! as PHandleTypeEnum,
      value: result[1]! as String,
    );
  }
}

class PEndCallReason {
  PEndCallReason({
    required this.value,
  });

  PEndCallReasonEnum value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static PEndCallReason decode(Object result) {
    result as List<Object?>;
    return PEndCallReason(
      value: result[0]! as PEndCallReasonEnum,
    );
  }
}

class PIncomingCallError {
  PIncomingCallError({
    required this.value,
  });

  PIncomingCallErrorEnum value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static PIncomingCallError decode(Object result) {
    result as List<Object?>;
    return PIncomingCallError(
      value: result[0]! as PIncomingCallErrorEnum,
    );
  }
}

class PCallRequestError {
  PCallRequestError({
    required this.value,
  });

  PCallRequestErrorEnum value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static PCallRequestError decode(Object result) {
    result as List<Object?>;
    return PCallRequestError(
      value: result[0]! as PCallRequestErrorEnum,
    );
  }
}

class PCallkeepServiceStatus {
  PCallkeepServiceStatus({
    required this.lifecycle,
  });

  PCallkeepLifecycleType lifecycle;

  Object encode() {
    return <Object?>[
      lifecycle,
    ];
  }

  static PCallkeepServiceStatus decode(Object result) {
    result as List<Object?>;
    return PCallkeepServiceStatus(
      lifecycle: result[0]! as PCallkeepLifecycleType,
    );
  }
}

class PCallkeepDisconnectCause {
  PCallkeepDisconnectCause({
    required this.type,
    this.reason,
  });

  PCallkeepDisconnectCauseType type;

  String? reason;

  Object encode() {
    return <Object?>[
      type,
      reason,
    ];
  }

  static PCallkeepDisconnectCause decode(Object result) {
    result as List<Object?>;
    return PCallkeepDisconnectCause(
      type: result[0]! as PCallkeepDisconnectCauseType,
      reason: result[1] as String?,
    );
  }
}

class PCallkeepConnection {
  PCallkeepConnection({
    required this.callId,
    required this.state,
    required this.disconnectCause,
  });

  String callId;

  PCallkeepConnectionState state;

  PCallkeepDisconnectCause disconnectCause;

  Object encode() {
    return <Object?>[
      callId,
      state,
      disconnectCause,
    ];
  }

  static PCallkeepConnection decode(Object result) {
    result as List<Object?>;
    return PCallkeepConnection(
      callId: result[0]! as String,
      state: result[1]! as PCallkeepConnectionState,
      disconnectCause: result[2]! as PCallkeepDisconnectCause,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PLogTypeEnum) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is PSpecialPermissionStatusTypeEnum) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PCallkeepAndroidBatteryMode) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is PHandleTypeEnum) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is PCallInfoConsts) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is PEndCallReasonEnum) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is PIncomingCallErrorEnum) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is PCallRequestErrorEnum) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is PCallkeepLifecycleType) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    }    else if (value is PCallkeepPushNotificationSyncStatus) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    }    else if (value is PCallkeepConnectionState) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    }    else if (value is PCallkeepDisconnectCauseType) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    }    else if (value is PCallkeepSignalingStatus) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    }    else if (value is PIOSOptions) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is PAndroidOptions) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is POptions) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is PHandle) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is PEndCallReason) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is PIncomingCallError) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is PCallRequestError) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is PCallkeepServiceStatus) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is PCallkeepDisconnectCause) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is PCallkeepConnection) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PLogTypeEnum.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PSpecialPermissionStatusTypeEnum.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallkeepAndroidBatteryMode.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PHandleTypeEnum.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallInfoConsts.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PEndCallReasonEnum.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PIncomingCallErrorEnum.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallRequestErrorEnum.values[value];
      case 137: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallkeepLifecycleType.values[value];
      case 138: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallkeepPushNotificationSyncStatus.values[value];
      case 139: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallkeepConnectionState.values[value];
      case 140: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallkeepDisconnectCauseType.values[value];
      case 141: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PCallkeepSignalingStatus.values[value];
      case 142: 
        return PIOSOptions.decode(readValue(buffer)!);
      case 143: 
        return PAndroidOptions.decode(readValue(buffer)!);
      case 144: 
        return POptions.decode(readValue(buffer)!);
      case 145: 
        return PHandle.decode(readValue(buffer)!);
      case 146: 
        return PEndCallReason.decode(readValue(buffer)!);
      case 147: 
        return PIncomingCallError.decode(readValue(buffer)!);
      case 148: 
        return PCallRequestError.decode(readValue(buffer)!);
      case 149: 
        return PCallkeepServiceStatus.decode(readValue(buffer)!);
      case 150: 
        return PCallkeepDisconnectCause.decode(readValue(buffer)!);
      case 151: 
        return PCallkeepConnection.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PHostBackgroundSignalingIsolateBootstrapApi {
  /// Constructor for [PHostBackgroundSignalingIsolateBootstrapApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostBackgroundSignalingIsolateBootstrapApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initializeSignalingServiceCallback({required int callbackDispatcher, required int onStartHandler, required int onChangedLifecycleHandler,}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateBootstrapApi.initializeSignalingServiceCallback$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callbackDispatcher, onStartHandler, onChangedLifecycleHandler]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> configureSignalingService({String? androidNotificationName, String? androidNotificationDescription}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateBootstrapApi.configureSignalingService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[androidNotificationName, androidNotificationDescription]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startService({String? jsonData}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateBootstrapApi.startService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[jsonData]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopService() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateBootstrapApi.stopService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class PHostBackgroundSignalingIsolateApi {
  /// Constructor for [PHostBackgroundSignalingIsolateApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostBackgroundSignalingIsolateApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> incomingCall(String callId, PHandle handle, String? displayName, bool hasVideo) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateApi.incomingCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, handle, displayName, hasVideo]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> endCall(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateApi.endCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> endAllCalls() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundSignalingIsolateApi.endAllCalls$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class PHostBackgroundPushNotificationIsolateBootstrapApi {
  /// Constructor for [PHostBackgroundPushNotificationIsolateBootstrapApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostBackgroundPushNotificationIsolateBootstrapApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initializePushNotificationCallback({required int callbackDispatcher, required int onNotificationSync}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundPushNotificationIsolateBootstrapApi.initializePushNotificationCallback$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callbackDispatcher, onNotificationSync]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PIncomingCallError?> reportNewIncomingCall(String callId, PHandle handle, String? displayName, bool hasVideo) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundPushNotificationIsolateBootstrapApi.reportNewIncomingCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, handle, displayName, hasVideo]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PIncomingCallError?);
    }
  }
}

class PHostBackgroundPushNotificationIsolateApi {
  /// Constructor for [PHostBackgroundPushNotificationIsolateApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostBackgroundPushNotificationIsolateApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> endCall(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundPushNotificationIsolateApi.endCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> endAllCalls() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundPushNotificationIsolateApi.endAllCalls$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class PHostPermissionsApi {
  /// Constructor for [PHostPermissionsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostPermissionsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<PSpecialPermissionStatusTypeEnum> getFullScreenIntentPermissionStatus() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostPermissionsApi.getFullScreenIntentPermissionStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PSpecialPermissionStatusTypeEnum?)!;
    }
  }

  Future<bool> openFullScreenIntentSettings() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostPermissionsApi.openFullScreenIntentSettings$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<PCallkeepAndroidBatteryMode> getBatteryMode() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostPermissionsApi.getBatteryMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PCallkeepAndroidBatteryMode?)!;
    }
  }
}

class PHostSoundApi {
  /// Constructor for [PHostSoundApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostSoundApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> playRingbackSound() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostSoundApi.playRingbackSound$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopRingbackSound() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostSoundApi.stopRingbackSound$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class PDelegateBackgroundRegisterFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<void> onWakeUpBackgroundHandler(int userCallbackHandle, PCallkeepServiceStatus status);

  Future<void> onApplicationStatusChanged(int applicationStatusCallbackHandle, PCallkeepServiceStatus status);

  Future<void> onNotificationSync(int pushNotificationSyncStatusHandle, PCallkeepPushNotificationSyncStatus status);

  static void setUp(PDelegateBackgroundRegisterFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onWakeUpBackgroundHandler$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onWakeUpBackgroundHandler was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_userCallbackHandle = (args[0] as int?);
          assert(arg_userCallbackHandle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onWakeUpBackgroundHandler was null, expected non-null int.');
          final PCallkeepServiceStatus? arg_status = (args[1] as PCallkeepServiceStatus?);
          assert(arg_status != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onWakeUpBackgroundHandler was null, expected non-null PCallkeepServiceStatus.');
          try {
            await api.onWakeUpBackgroundHandler(arg_userCallbackHandle!, arg_status!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onApplicationStatusChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onApplicationStatusChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_applicationStatusCallbackHandle = (args[0] as int?);
          assert(arg_applicationStatusCallbackHandle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onApplicationStatusChanged was null, expected non-null int.');
          final PCallkeepServiceStatus? arg_status = (args[1] as PCallkeepServiceStatus?);
          assert(arg_status != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onApplicationStatusChanged was null, expected non-null PCallkeepServiceStatus.');
          try {
            await api.onApplicationStatusChanged(arg_applicationStatusCallbackHandle!, arg_status!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onNotificationSync$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onNotificationSync was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pushNotificationSyncStatusHandle = (args[0] as int?);
          assert(arg_pushNotificationSyncStatusHandle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onNotificationSync was null, expected non-null int.');
          final PCallkeepPushNotificationSyncStatus? arg_status = (args[1] as PCallkeepPushNotificationSyncStatus?);
          assert(arg_status != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundRegisterFlutterApi.onNotificationSync was null, expected non-null PCallkeepPushNotificationSyncStatus.');
          try {
            await api.onNotificationSync(arg_pushNotificationSyncStatusHandle!, arg_status!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class PHostApi {
  /// Constructor for [PHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> isSetUp() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.isSetUp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setUp(POptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setUp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[options]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tearDown() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.tearDown$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PIncomingCallError?> reportNewIncomingCall(String callId, PHandle handle, String? displayName, bool hasVideo) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportNewIncomingCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, handle, displayName, hasVideo]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PIncomingCallError?);
    }
  }

  Future<void> reportConnectingOutgoingCall(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportConnectingOutgoingCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportConnectedOutgoingCall(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportConnectedOutgoingCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportUpdateCall(String callId, PHandle? handle, String? displayName, bool? hasVideo, bool? proximityEnabled) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportUpdateCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, handle, displayName, hasVideo, proximityEnabled]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportEndCall(String callId, String displayName, PEndCallReason reason) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportEndCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, displayName, reason]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PCallRequestError?> startCall(String callId, PHandle handle, String? displayNameOrContactIdentifier, bool video, bool proximityEnabled) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.startCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, handle, displayNameOrContactIdentifier, video, proximityEnabled]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> answerCall(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.answerCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> endCall(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.endCall$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> setHeld(String callId, bool onHold) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setHeld$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, onHold]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> setMuted(String callId, bool muted) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setMuted$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, muted]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> setSpeaker(String callId, bool enabled) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setSpeaker$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, enabled]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> sendDTMF(String callId, String key) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.sendDTMF$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId, key]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallRequestError?);
    }
  }
}

class PHostConnectionsApi {
  /// Constructor for [PHostConnectionsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostConnectionsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<PCallkeepConnection?> getConnection(String callId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostConnectionsApi.getConnection$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PCallkeepConnection?);
    }
  }

  Future<List<PCallkeepConnection>> getConnections() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostConnectionsApi.getConnections$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PCallkeepConnection>();
    }
  }

  Future<void> updateActivitySignalingStatus(PCallkeepSignalingStatus status) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PHostConnectionsApi.updateActivitySignalingStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[status]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class PDelegateFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void continueStartCallIntent(PHandle handle, String? displayName, bool video);

  void didPushIncomingCall(PHandle handle, String? displayName, bool video, String callId, PIncomingCallError? error);

  Future<bool> performStartCall(String callId, PHandle handle, String? displayNameOrContactIdentifier, bool video);

  Future<bool> performAnswerCall(String callId);

  Future<bool> performEndCall(String callId);

  Future<bool> performSetHeld(String callId, bool onHold);

  Future<bool> performSetMuted(String callId, bool muted);

  Future<bool> performSetSpeaker(String callId, bool enabled);

  Future<bool> performSendDTMF(String callId, String key);

  void didActivateAudioSession();

  void didDeactivateAudioSession();

  void didReset();

  static void setUp(PDelegateFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.continueStartCallIntent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.continueStartCallIntent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PHandle? arg_handle = (args[0] as PHandle?);
          assert(arg_handle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.continueStartCallIntent was null, expected non-null PHandle.');
          final String? arg_displayName = (args[1] as String?);
          final bool? arg_video = (args[2] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.continueStartCallIntent was null, expected non-null bool.');
          try {
            api.continueStartCallIntent(arg_handle!, arg_displayName, arg_video!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didPushIncomingCall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didPushIncomingCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PHandle? arg_handle = (args[0] as PHandle?);
          assert(arg_handle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null PHandle.');
          final String? arg_displayName = (args[1] as String?);
          final bool? arg_video = (args[2] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null bool.');
          final String? arg_callId = (args[3] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null String.');
          final PIncomingCallError? arg_error = (args[4] as PIncomingCallError?);
          try {
            api.didPushIncomingCall(arg_handle!, arg_displayName, arg_video!, arg_callId!, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performStartCall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performStartCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performStartCall was null, expected non-null String.');
          final PHandle? arg_handle = (args[1] as PHandle?);
          assert(arg_handle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performStartCall was null, expected non-null PHandle.');
          final String? arg_displayNameOrContactIdentifier = (args[2] as String?);
          final bool? arg_video = (args[3] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performStartCall was null, expected non-null bool.');
          try {
            final bool output = await api.performStartCall(arg_callId!, arg_handle!, arg_displayNameOrContactIdentifier, arg_video!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performAnswerCall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performAnswerCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performAnswerCall was null, expected non-null String.');
          try {
            final bool output = await api.performAnswerCall(arg_callId!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performEndCall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performEndCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performEndCall was null, expected non-null String.');
          try {
            final bool output = await api.performEndCall(arg_callId!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetHeld$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetHeld was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetHeld was null, expected non-null String.');
          final bool? arg_onHold = (args[1] as bool?);
          assert(arg_onHold != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetHeld was null, expected non-null bool.');
          try {
            final bool output = await api.performSetHeld(arg_callId!, arg_onHold!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetMuted$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetMuted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetMuted was null, expected non-null String.');
          final bool? arg_muted = (args[1] as bool?);
          assert(arg_muted != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetMuted was null, expected non-null bool.');
          try {
            final bool output = await api.performSetMuted(arg_callId!, arg_muted!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetSpeaker$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetSpeaker was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetSpeaker was null, expected non-null String.');
          final bool? arg_enabled = (args[1] as bool?);
          assert(arg_enabled != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetSpeaker was null, expected non-null bool.');
          try {
            final bool output = await api.performSetSpeaker(arg_callId!, arg_enabled!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSendDTMF$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSendDTMF was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSendDTMF was null, expected non-null String.');
          final String? arg_key = (args[1] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSendDTMF was null, expected non-null String.');
          try {
            final bool output = await api.performSendDTMF(arg_callId!, arg_key!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didActivateAudioSession$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.didActivateAudioSession();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didDeactivateAudioSession$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.didDeactivateAudioSession();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didReset$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.didReset();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PDelegateBackgroundServiceFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<void> performAnswerCall(String callId);

  Future<void> performEndCall(String callId);

  Future<void> endCallReceived(String callId, String number, bool video, int createdTime, int? acceptedTime, int? hungUpTime);

  static void setUp(PDelegateBackgroundServiceFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performAnswerCall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performAnswerCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performAnswerCall was null, expected non-null String.');
          try {
            await api.performAnswerCall(arg_callId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performEndCall$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performEndCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performEndCall was null, expected non-null String.');
          try {
            await api.performEndCall(arg_callId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callId = (args[0] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived was null, expected non-null String.');
          final String? arg_number = (args[1] as String?);
          assert(arg_number != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived was null, expected non-null String.');
          final bool? arg_video = (args[2] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived was null, expected non-null bool.');
          final int? arg_createdTime = (args[3] as int?);
          assert(arg_createdTime != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived was null, expected non-null int.');
          final int? arg_acceptedTime = (args[4] as int?);
          final int? arg_hungUpTime = (args[5] as int?);
          try {
            await api.endCallReceived(arg_callId!, arg_number!, arg_video!, arg_createdTime!, arg_acceptedTime, arg_hungUpTime);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class PPushRegistryHostApi {
  /// Constructor for [PPushRegistryHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PPushRegistryHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<String?> pushTokenForPushTypeVoIP() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.webtrit_callkeep_android.PPushRegistryHostApi.pushTokenForPushTypeVoIP$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }
}

abstract class PPushRegistryDelegateFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void didUpdatePushTokenForPushTypeVoIP(String? token);

  static void setUp(PPushRegistryDelegateFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_token = (args[0] as String?);
          try {
            api.didUpdatePushTokenForPushTypeVoIP(arg_token);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PDelegateLogsFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onLog(PLogTypeEnum type, String tag, String message);

  static void setUp(PDelegateLogsFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_android.PDelegateLogsFlutterApi.onLog$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateLogsFlutterApi.onLog was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PLogTypeEnum? arg_type = (args[0] as PLogTypeEnum?);
          assert(arg_type != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateLogsFlutterApi.onLog was null, expected non-null PLogTypeEnum.');
          final String? arg_tag = (args[1] as String?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateLogsFlutterApi.onLog was null, expected non-null String.');
          final String? arg_message = (args[2] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_android.PDelegateLogsFlutterApi.onLog was null, expected non-null String.');
          try {
            api.onLog(arg_type!, arg_tag!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
