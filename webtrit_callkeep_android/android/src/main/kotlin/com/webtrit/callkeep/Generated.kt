// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.webtrit.callkeep

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PLogTypeEnum(val raw: Int) {
  DEBUG(0),
  ERROR(1),
  INFO(2),
  VERBOSE(3),
  WARN(4);

  companion object {
    fun ofRaw(raw: Int): PLogTypeEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PHandleTypeEnum(val raw: Int) {
  GENERIC(0),
  NUMBER(1),
  EMAIL(2);

  companion object {
    fun ofRaw(raw: Int): PHandleTypeEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PCallInfoConsts(val raw: Int) {
  UUID(0),
  DTMF(1),
  ISVIDEO(2),
  NUMBER(3),
  NAME(4);

  companion object {
    fun ofRaw(raw: Int): PCallInfoConsts? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PEndCallReasonEnum(val raw: Int) {
  FAILED(0),
  REMOTEENDED(1),
  UNANSWERED(2),
  ANSWEREDELSEWHERE(3),
  DECLINEDELSEWHERE(4),
  MISSED(5);

  companion object {
    fun ofRaw(raw: Int): PEndCallReasonEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PIncomingCallErrorEnum(val raw: Int) {
  UNKNOWN(0),
  UNENTITLED(1),
  CALLIDALREADYEXISTS(2),
  CALLIDALREADYEXISTSANDANSWERED(3),
  CALLIDALREADYTERMINATED(4),
  FILTEREDBYDONOTDISTURB(5),
  FILTEREDBYBLOCKLIST(6),
  INTERNAL(7);

  companion object {
    fun ofRaw(raw: Int): PIncomingCallErrorEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PCallRequestErrorEnum(val raw: Int) {
  UNKNOWN(0),
  UNENTITLED(1),
  UNKNOWNCALLUUID(2),
  CALLUUIDALREADYEXISTS(3),
  MAXIMUMCALLGROUPSREACHED(4),
  INTERNAL(5),
  EMERGENCYNUMBER(6);

  companion object {
    fun ofRaw(raw: Int): PCallRequestErrorEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PIOSOptions (
  val localizedName: String,
  val ringtoneSound: String? = null,
  val iconTemplateImageAssetName: String? = null,
  val maximumCallGroups: Long,
  val maximumCallsPerCallGroup: Long,
  val supportsHandleTypeGeneric: Boolean? = null,
  val supportsHandleTypePhoneNumber: Boolean? = null,
  val supportsHandleTypeEmailAddress: Boolean? = null,
  val supportsVideo: Boolean,
  val includesCallsInRecents: Boolean,
  val driveIdleTimerDisabled: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PIOSOptions {
      val localizedName = list[0] as String
      val ringtoneSound = list[1] as String?
      val iconTemplateImageAssetName = list[2] as String?
      val maximumCallGroups = list[3].let { if (it is Int) it.toLong() else it as Long }
      val maximumCallsPerCallGroup = list[4].let { if (it is Int) it.toLong() else it as Long }
      val supportsHandleTypeGeneric = list[5] as Boolean?
      val supportsHandleTypePhoneNumber = list[6] as Boolean?
      val supportsHandleTypeEmailAddress = list[7] as Boolean?
      val supportsVideo = list[8] as Boolean
      val includesCallsInRecents = list[9] as Boolean
      val driveIdleTimerDisabled = list[10] as Boolean
      return PIOSOptions(localizedName, ringtoneSound, iconTemplateImageAssetName, maximumCallGroups, maximumCallsPerCallGroup, supportsHandleTypeGeneric, supportsHandleTypePhoneNumber, supportsHandleTypeEmailAddress, supportsVideo, includesCallsInRecents, driveIdleTimerDisabled)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      localizedName,
      ringtoneSound,
      iconTemplateImageAssetName,
      maximumCallGroups,
      maximumCallsPerCallGroup,
      supportsHandleTypeGeneric,
      supportsHandleTypePhoneNumber,
      supportsHandleTypeEmailAddress,
      supportsVideo,
      includesCallsInRecents,
      driveIdleTimerDisabled,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PAndroidOptions (
  val ringtoneSound: String? = null,
  val incomingPath: String,
  val rootPath: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PAndroidOptions {
      val ringtoneSound = list[0] as String?
      val incomingPath = list[1] as String
      val rootPath = list[2] as String
      return PAndroidOptions(ringtoneSound, incomingPath, rootPath)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      ringtoneSound,
      incomingPath,
      rootPath,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class POptions (
  val ios: PIOSOptions,
  val android: PAndroidOptions

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): POptions {
      val ios = PIOSOptions.fromList(list[0] as List<Any?>)
      val android = PAndroidOptions.fromList(list[1] as List<Any?>)
      return POptions(ios, android)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      ios.toList(),
      android.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PHandle (
  val type: PHandleTypeEnum,
  val value: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PHandle {
      val type = PHandleTypeEnum.ofRaw(list[0] as Int)!!
      val value = list[1] as String
      return PHandle(type, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type.raw,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PEndCallReason (
  val value: PEndCallReasonEnum

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PEndCallReason {
      val value = PEndCallReasonEnum.ofRaw(list[0] as Int)!!
      return PEndCallReason(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      value.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PIncomingCallError (
  val value: PIncomingCallErrorEnum

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PIncomingCallError {
      val value = PIncomingCallErrorEnum.ofRaw(list[0] as Int)!!
      return PIncomingCallError(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      value.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PCallRequestError (
  val value: PCallRequestErrorEnum

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PCallRequestError {
      val value = PCallRequestErrorEnum.ofRaw(list[0] as Int)!!
      return PCallRequestError(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      value.raw,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object PHostBackgroundServiceApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PHandle.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PHandle -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PHostBackgroundServiceApi {
  fun incomingCall(callId: String, handle: PHandle, displayName: String?, hasVideo: Boolean, callback: (Result<Unit>) -> Unit)
  fun endCall(callId: String, callback: (Result<Unit>) -> Unit)
  fun endAllCalls(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by PHostBackgroundServiceApi. */
    val codec: MessageCodec<Any?> by lazy {
      PHostBackgroundServiceApiCodec
    }
    /** Sets up an instance of `PHostBackgroundServiceApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PHostBackgroundServiceApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundServiceApi.incomingCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val handleArg = args[1] as PHandle
            val displayNameArg = args[2] as String?
            val hasVideoArg = args[3] as Boolean
            api.incomingCall(callIdArg, handleArg, displayNameArg, hasVideoArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundServiceApi.endCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            api.endCall(callIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostBackgroundServiceApi.endAllCalls", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.endAllCalls() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object PHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PAndroidOptions.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PCallRequestError.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PEndCallReason.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PHandle.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PHandle.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PIOSOptions.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PIncomingCallError.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          POptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PAndroidOptions -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PCallRequestError -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PEndCallReason -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PHandle -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PHandle -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PIOSOptions -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PIncomingCallError -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is POptions -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PHostApi {
  fun isSetUp(): Boolean
  fun setUp(options: POptions, callback: (Result<Unit>) -> Unit)
  fun tearDown(callback: (Result<Unit>) -> Unit)
  fun reportNewIncomingCall(callId: String, handle: PHandle, displayName: String?, hasVideo: Boolean, callback: (Result<PIncomingCallError?>) -> Unit)
  fun reportConnectingOutgoingCall(callId: String, callback: (Result<Unit>) -> Unit)
  fun reportConnectedOutgoingCall(callId: String, callback: (Result<Unit>) -> Unit)
  fun reportUpdateCall(callId: String, handle: PHandle?, displayName: String?, hasVideo: Boolean?, proximityEnabled: Boolean?, callback: (Result<Unit>) -> Unit)
  fun reportEndCall(callId: String, reason: PEndCallReason, callback: (Result<Unit>) -> Unit)
  fun startCall(callId: String, handle: PHandle, displayNameOrContactIdentifier: String?, video: Boolean, proximityEnabled: Boolean, callback: (Result<PCallRequestError?>) -> Unit)
  fun answerCall(callId: String, callback: (Result<PCallRequestError?>) -> Unit)
  fun endCall(callId: String, callback: (Result<PCallRequestError?>) -> Unit)
  fun setHeld(callId: String, onHold: Boolean, callback: (Result<PCallRequestError?>) -> Unit)
  fun setMuted(callId: String, muted: Boolean, callback: (Result<PCallRequestError?>) -> Unit)
  fun setSpeaker(callId: String, enabled: Boolean, callback: (Result<PCallRequestError?>) -> Unit)
  fun sendDTMF(callId: String, key: String, callback: (Result<PCallRequestError?>) -> Unit)

  companion object {
    /** The codec used by PHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PHostApiCodec
    }
    /** Sets up an instance of `PHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.isSetUp", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isSetUp())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setUp", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as POptions
            api.setUp(optionsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.tearDown", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.tearDown() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportNewIncomingCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val handleArg = args[1] as PHandle
            val displayNameArg = args[2] as String?
            val hasVideoArg = args[3] as Boolean
            api.reportNewIncomingCall(callIdArg, handleArg, displayNameArg, hasVideoArg) { result: Result<PIncomingCallError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportConnectingOutgoingCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            api.reportConnectingOutgoingCall(callIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportConnectedOutgoingCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            api.reportConnectedOutgoingCall(callIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportUpdateCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val handleArg = args[1] as PHandle?
            val displayNameArg = args[2] as String?
            val hasVideoArg = args[3] as Boolean?
            val proximityEnabledArg = args[4] as Boolean?
            api.reportUpdateCall(callIdArg, handleArg, displayNameArg, hasVideoArg, proximityEnabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.reportEndCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val reasonArg = args[1] as PEndCallReason
            api.reportEndCall(callIdArg, reasonArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.startCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val handleArg = args[1] as PHandle
            val displayNameOrContactIdentifierArg = args[2] as String?
            val videoArg = args[3] as Boolean
            val proximityEnabledArg = args[4] as Boolean
            api.startCall(callIdArg, handleArg, displayNameOrContactIdentifierArg, videoArg, proximityEnabledArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.answerCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            api.answerCall(callIdArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.endCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            api.endCall(callIdArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setHeld", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val onHoldArg = args[1] as Boolean
            api.setHeld(callIdArg, onHoldArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setMuted", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val mutedArg = args[1] as Boolean
            api.setMuted(callIdArg, mutedArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.setSpeaker", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val enabledArg = args[1] as Boolean
            api.setSpeaker(callIdArg, enabledArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PHostApi.sendDTMF", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callIdArg = args[0] as String
            val keyArg = args[1] as String
            api.sendDTMF(callIdArg, keyArg) { result: Result<PCallRequestError?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object PDelegateFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PHandle.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PIncomingCallError.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PHandle -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PIncomingCallError -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PDelegateFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PDelegateFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PDelegateFlutterApiCodec
    }
  }
  fun continueStartCallIntent(handleArg: PHandle, displayNameArg: String?, videoArg: Boolean, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.continueStartCallIntent"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(handleArg, displayNameArg, videoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didPushIncomingCall(handleArg: PHandle, displayNameArg: String?, videoArg: Boolean, callIdArg: String, errorArg: PIncomingCallError?, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didPushIncomingCall"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(handleArg, displayNameArg, videoArg, callIdArg, errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performStartCall(callIdArg: String, handleArg: PHandle, displayNameOrContactIdentifierArg: String?, videoArg: Boolean, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performStartCall"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg, handleArg, displayNameOrContactIdentifierArg, videoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performAnswerCall(callIdArg: String, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performAnswerCall"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performEndCall(callIdArg: String, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performEndCall"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performSetHeld(callIdArg: String, onHoldArg: Boolean, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetHeld"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg, onHoldArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performSetMuted(callIdArg: String, mutedArg: Boolean, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetMuted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg, mutedArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performSetSpeaker(callIdArg: String, enabledArg: Boolean, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSetSpeaker"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg, enabledArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun performSendDTMF(callIdArg: String, keyArg: String, callback: (Result<Boolean>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.performSendDTMF"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg, keyArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didActivateAudioSession(callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didActivateAudioSession"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didDeactivateAudioSession(callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didDeactivateAudioSession"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun didReset(callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateFlutterApi.didReset"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PDelegateBackgroundServiceFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PDelegateBackgroundServiceFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun performEndCall(callIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.performEndCall"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun endCallReceived(callIdArg: String, numberArg: String, videoArg: Boolean, createdTimeArg: Long, acceptedTimeArg: Long?, hungUpTimeArg: Long?, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateBackgroundServiceFlutterApi.endCallReceived"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(callIdArg, numberArg, videoArg, createdTimeArg, acceptedTimeArg, hungUpTimeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PPushRegistryHostApi {
  fun pushTokenForPushTypeVoIP(): String?

  companion object {
    /** The codec used by PPushRegistryHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `PPushRegistryHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PPushRegistryHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep_android.PPushRegistryHostApi.pushTokenForPushTypeVoIP", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.pushTokenForPushTypeVoIP())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PPushRegistryDelegateFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PPushRegistryDelegateFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun didUpdatePushTokenForPushTypeVoIP(tokenArg: String?, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(tokenArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PDelegateLogsFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PDelegateLogsFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onLog(typeArg: PLogTypeEnum, tagArg: String, messageArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.webtrit_callkeep_android.PDelegateLogsFlutterApi.onLog"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(typeArg.raw, tagArg, messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
