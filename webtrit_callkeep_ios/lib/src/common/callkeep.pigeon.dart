// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PHandleTypeEnum {
  generic,
  number,
  email,
}

enum PCallInfoConsts {
  uuid,
  dtmf,
  isVideo,
  number,
  name,
}

enum PEndCallReasonEnum {
  failed,
  remoteEnded,
  unanswered,
  answeredElsewhere,
  declinedElsewhere,
  missed,
}

enum PIncomingCallErrorEnum {
  unknown,
  unentitled,
  callUuidAlreadyExists,
  filteredByDoNotDisturb,
  filteredByBlockList,
  internal,
}

enum PCallRequestErrorEnum {
  unknown,
  unentitled,
  unknownCallUuid,
  callUuidAlreadyExists,
  maximumCallGroupsReached,
  internal,
}

class PIOSOptions {
  PIOSOptions({
    required this.localizedName,
    this.ringtoneSound,
    this.iconTemplateImageAssetName,
    required this.maximumCallGroups,
    required this.maximumCallsPerCallGroup,
    this.supportsHandleTypeGeneric,
    this.supportsHandleTypePhoneNumber,
    this.supportsHandleTypeEmailAddress,
    required this.supportsVideo,
    required this.includesCallsInRecents,
    required this.driveIdleTimerDisabled,
  });

  String localizedName;

  String? ringtoneSound;

  String? iconTemplateImageAssetName;

  int maximumCallGroups;

  int maximumCallsPerCallGroup;

  bool? supportsHandleTypeGeneric;

  bool? supportsHandleTypePhoneNumber;

  bool? supportsHandleTypeEmailAddress;

  bool supportsVideo;

  bool includesCallsInRecents;

  bool driveIdleTimerDisabled;

  Object encode() {
    return <Object?>[
      localizedName,
      ringtoneSound,
      iconTemplateImageAssetName,
      maximumCallGroups,
      maximumCallsPerCallGroup,
      supportsHandleTypeGeneric,
      supportsHandleTypePhoneNumber,
      supportsHandleTypeEmailAddress,
      supportsVideo,
      includesCallsInRecents,
      driveIdleTimerDisabled,
    ];
  }

  static PIOSOptions decode(Object result) {
    result as List<Object?>;
    return PIOSOptions(
      localizedName: result[0]! as String,
      ringtoneSound: result[1] as String?,
      iconTemplateImageAssetName: result[2] as String?,
      maximumCallGroups: result[3]! as int,
      maximumCallsPerCallGroup: result[4]! as int,
      supportsHandleTypeGeneric: result[5] as bool?,
      supportsHandleTypePhoneNumber: result[6] as bool?,
      supportsHandleTypeEmailAddress: result[7] as bool?,
      supportsVideo: result[8]! as bool,
      includesCallsInRecents: result[9]! as bool,
      driveIdleTimerDisabled: result[10]! as bool,
    );
  }
}

class PAndroidOptions {
  PAndroidOptions({
    this.ringtoneSound,
    required this.incomingPath,
    required this.rootPath,
  });

  String? ringtoneSound;

  String incomingPath;

  String rootPath;

  Object encode() {
    return <Object?>[
      ringtoneSound,
      incomingPath,
      rootPath,
    ];
  }

  static PAndroidOptions decode(Object result) {
    result as List<Object?>;
    return PAndroidOptions(
      ringtoneSound: result[0] as String?,
      incomingPath: result[1]! as String,
      rootPath: result[2]! as String,
    );
  }
}

class POptions {
  POptions({
    required this.ios,
    required this.android,
  });

  PIOSOptions ios;

  PAndroidOptions android;

  Object encode() {
    return <Object?>[
      ios.encode(),
      android.encode(),
    ];
  }

  static POptions decode(Object result) {
    result as List<Object?>;
    return POptions(
      ios: PIOSOptions.decode(result[0]! as List<Object?>),
      android: PAndroidOptions.decode(result[1]! as List<Object?>),
    );
  }
}

class PHandle {
  PHandle({
    required this.type,
    required this.value,
  });

  PHandleTypeEnum type;

  String value;

  Object encode() {
    return <Object?>[
      type.index,
      value,
    ];
  }

  static PHandle decode(Object result) {
    result as List<Object?>;
    return PHandle(
      type: PHandleTypeEnum.values[result[0]! as int],
      value: result[1]! as String,
    );
  }
}

class PEndCallReason {
  PEndCallReason({
    required this.value,
  });

  PEndCallReasonEnum value;

  Object encode() {
    return <Object?>[
      value.index,
    ];
  }

  static PEndCallReason decode(Object result) {
    result as List<Object?>;
    return PEndCallReason(
      value: PEndCallReasonEnum.values[result[0]! as int],
    );
  }
}

class PIncomingCallError {
  PIncomingCallError({
    required this.value,
  });

  PIncomingCallErrorEnum value;

  Object encode() {
    return <Object?>[
      value.index,
    ];
  }

  static PIncomingCallError decode(Object result) {
    result as List<Object?>;
    return PIncomingCallError(
      value: PIncomingCallErrorEnum.values[result[0]! as int],
    );
  }
}

class PCallRequestError {
  PCallRequestError({
    required this.value,
  });

  PCallRequestErrorEnum value;

  Object encode() {
    return <Object?>[
      value.index,
    ];
  }

  static PCallRequestError decode(Object result) {
    result as List<Object?>;
    return PCallRequestError(
      value: PCallRequestErrorEnum.values[result[0]! as int],
    );
  }
}

class _PHostAndroidServiceApiCodec extends StandardMessageCodec {
  const _PHostAndroidServiceApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PHandle) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PHandle.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PHostAndroidServiceApi {
  /// Constructor for [PHostAndroidServiceApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostAndroidServiceApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PHostAndroidServiceApiCodec();

  Future<void> hungUp(String callId, String uuidString) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostAndroidServiceApi.hungUp';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[callId, uuidString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> incomingCall(String callId, String uuidString, PHandle handle, String? displayName, bool hasVideo) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostAndroidServiceApi.incomingCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[callId, uuidString, handle, displayName, hasVideo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _PHostApiCodec extends StandardMessageCodec {
  const _PHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PAndroidOptions) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PCallRequestError) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PEndCallReason) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PHandle) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PHandle) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PIOSOptions) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PIncomingCallError) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is POptions) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PAndroidOptions.decode(readValue(buffer)!);
      case 129: 
        return PCallRequestError.decode(readValue(buffer)!);
      case 130: 
        return PEndCallReason.decode(readValue(buffer)!);
      case 131: 
        return PHandle.decode(readValue(buffer)!);
      case 132: 
        return PHandle.decode(readValue(buffer)!);
      case 133: 
        return PIOSOptions.decode(readValue(buffer)!);
      case 134: 
        return PIncomingCallError.decode(readValue(buffer)!);
      case 135: 
        return POptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PHostApi {
  /// Constructor for [PHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PHostApiCodec();

  Future<bool> isSetUp() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.isSetUp';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> setUp(POptions options) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.setUp';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[options]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tearDown() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.tearDown';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PIncomingCallError?> reportNewIncomingCall(String uuidString, PHandle handle, String? displayName, bool hasVideo) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.reportNewIncomingCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, handle, displayName, hasVideo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PIncomingCallError?);
    }
  }

  Future<void> reportConnectingOutgoingCall(String uuidString) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.reportConnectingOutgoingCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportConnectedOutgoingCall(String uuidString) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.reportConnectedOutgoingCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportUpdateCall(String uuidString, PHandle? handle, String? displayName, bool? hasVideo, bool? proximityEnabled) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.reportUpdateCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, handle, displayName, hasVideo, proximityEnabled]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportEndCall(String uuidString, PEndCallReason reason) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.reportEndCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, reason]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PCallRequestError?> startCall(String uuidString, PHandle handle, String? displayNameOrContactIdentifier, bool video, bool proximityEnabled) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.startCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, handle, displayNameOrContactIdentifier, video, proximityEnabled]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> answerCall(String uuidString) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.answerCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> endCall(String uuidString) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.endCall';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> setHeld(String uuidString, bool onHold) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.setHeld';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, onHold]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> setMuted(String uuidString, bool muted) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.setMuted';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, muted]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> setSpeaker(String uuidString, bool enabled) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.setSpeaker';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, enabled]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }

  Future<PCallRequestError?> sendDTMF(String uuidString, String key) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PHostApi.sendDTMF';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidString, key]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PCallRequestError?);
    }
  }
}

class _PDelegateFlutterApiCodec extends StandardMessageCodec {
  const _PDelegateFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PHandle) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PIncomingCallError) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PHandle.decode(readValue(buffer)!);
      case 129: 
        return PIncomingCallError.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class PDelegateFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PDelegateFlutterApiCodec();

  void continueStartCallIntent(PHandle handle, String? displayName, bool video);

  void didPushIncomingCall(PHandle handle, String? displayName, bool video, String callId, String uuidString, PIncomingCallError? error);

  Future<bool> performStartCall(String uuidString, PHandle handle, String? displayNameOrContactIdentifier, bool video);

  Future<bool> performAnswerCall(String uuidString);

  Future<bool> performEndCall(String uuidString);

  Future<bool> performSetHeld(String uuidString, bool onHold);

  Future<bool> performSetMuted(String uuidString, bool muted);

  Future<bool> performSetSpeaker(String uuidString, bool enabled);

  Future<bool> performSendDTMF(String uuidString, String key);

  void didActivateAudioSession();

  void didDeactivateAudioSession();

  void didReset();

  static void setup(PDelegateFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.continueStartCallIntent', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.continueStartCallIntent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PHandle? arg_handle = (args[0] as PHandle?);
          assert(arg_handle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.continueStartCallIntent was null, expected non-null PHandle.');
          final String? arg_displayName = (args[1] as String?);
          final bool? arg_video = (args[2] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.continueStartCallIntent was null, expected non-null bool.');
          try {
            api.continueStartCallIntent(arg_handle!, arg_displayName, arg_video!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didPushIncomingCall', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didPushIncomingCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PHandle? arg_handle = (args[0] as PHandle?);
          assert(arg_handle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null PHandle.');
          final String? arg_displayName = (args[1] as String?);
          final bool? arg_video = (args[2] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null bool.');
          final String? arg_callId = (args[3] as String?);
          assert(arg_callId != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null String.');
          final String? arg_uuidString = (args[4] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didPushIncomingCall was null, expected non-null String.');
          final PIncomingCallError? arg_error = (args[5] as PIncomingCallError?);
          try {
            api.didPushIncomingCall(arg_handle!, arg_displayName, arg_video!, arg_callId!, arg_uuidString!, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performStartCall', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performStartCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performStartCall was null, expected non-null String.');
          final PHandle? arg_handle = (args[1] as PHandle?);
          assert(arg_handle != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performStartCall was null, expected non-null PHandle.');
          final String? arg_displayNameOrContactIdentifier = (args[2] as String?);
          final bool? arg_video = (args[3] as bool?);
          assert(arg_video != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performStartCall was null, expected non-null bool.');
          try {
            final bool output = await api.performStartCall(arg_uuidString!, arg_handle!, arg_displayNameOrContactIdentifier, arg_video!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performAnswerCall', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performAnswerCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performAnswerCall was null, expected non-null String.');
          try {
            final bool output = await api.performAnswerCall(arg_uuidString!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performEndCall', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performEndCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performEndCall was null, expected non-null String.');
          try {
            final bool output = await api.performEndCall(arg_uuidString!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetHeld', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetHeld was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetHeld was null, expected non-null String.');
          final bool? arg_onHold = (args[1] as bool?);
          assert(arg_onHold != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetHeld was null, expected non-null bool.');
          try {
            final bool output = await api.performSetHeld(arg_uuidString!, arg_onHold!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetMuted', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetMuted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetMuted was null, expected non-null String.');
          final bool? arg_muted = (args[1] as bool?);
          assert(arg_muted != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetMuted was null, expected non-null bool.');
          try {
            final bool output = await api.performSetMuted(arg_uuidString!, arg_muted!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetSpeaker', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetSpeaker was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetSpeaker was null, expected non-null String.');
          final bool? arg_enabled = (args[1] as bool?);
          assert(arg_enabled != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSetSpeaker was null, expected non-null bool.');
          try {
            final bool output = await api.performSetSpeaker(arg_uuidString!, arg_enabled!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSendDTMF', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSendDTMF was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSendDTMF was null, expected non-null String.');
          final String? arg_key = (args[1] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.performSendDTMF was null, expected non-null String.');
          try {
            final bool output = await api.performSendDTMF(arg_uuidString!, arg_key!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didActivateAudioSession', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.didActivateAudioSession();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didDeactivateAudioSession', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.didDeactivateAudioSession();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateFlutterApi.didReset', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.didReset();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class PDelegateAndroidServiceFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<void> performEndCall(String uuidString);

  static void setup(PDelegateAndroidServiceFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateAndroidServiceFlutterApi.performEndCall', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateAndroidServiceFlutterApi.performEndCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_uuidString = (args[0] as String?);
          assert(arg_uuidString != null,
              'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PDelegateAndroidServiceFlutterApi.performEndCall was null, expected non-null String.');
          try {
            await api.performEndCall(arg_uuidString!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class PPushRegistryHostApi {
  /// Constructor for [PPushRegistryHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PPushRegistryHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<String?> pushTokenForPushTypeVoIP() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.PPushRegistryHostApi.pushTokenForPushTypeVoIP';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }
}

abstract class PPushRegistryDelegateFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  void didUpdatePushTokenForPushTypeVoIP(String? token);

  static void setup(PPushRegistryDelegateFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.webtrit_callkeep_ios.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.webtrit_callkeep_ios.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_token = (args[0] as String?);
          try {
            api.didUpdatePushTokenForPushTypeVoIP(arg_token);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class AndroidHelperHostApi {
  /// Constructor for [AndroidHelperHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AndroidHelperHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<void> wakeUpApp(String? path) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.AndroidHelperHostApi.wakeUpApp';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[path]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isLockScreen() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.webtrit_callkeep_ios.AndroidHelperHostApi.isLockScreen';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }
}
